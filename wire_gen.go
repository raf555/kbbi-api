// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/raf555/kbbi-api/internal/config"
	"github.com/raf555/kbbi-api/internal/handlers/v1/entry"
	"github.com/raf555/kbbi-api/internal/handlers/v1/home"
	"github.com/raf555/kbbi-api/internal/logger"
	"github.com/raf555/kbbi-api/internal/repositories/dict"
	"github.com/raf555/kbbi-api/internal/repositories/wotd"
	"github.com/raf555/kbbi-api/internal/router"
)

// Injectors from wire.go:

func InitializeDependency() (*MainDependency, error) {
	configuration, err := config.ReadConfig()
	if err != nil {
		return nil, err
	}
	slogLogger := logger.NewLogger()
	repository, err := wotd.New(configuration)
	if err != nil {
		return nil, err
	}
	dictionary, err := dict.New(configuration, slogLogger, repository)
	if err != nil {
		return nil, err
	}
	handler := entry.New(slogLogger, dictionary)
	homeHandler := home.New(dictionary)
	engine := router.New(slogLogger, handler, homeHandler)
	server := NewHTTPServer(configuration, engine)
	mainDependency := &MainDependency{
		HTTPServer: server,
		Logger:     slogLogger,
	}
	return mainDependency, nil
}

// wire.go:

var (
	noDepSet = wire.NewSet(config.ReadConfig)

	mainDepSet = wire.NewSet(logger.NewLogger)

	repoSet = wire.NewSet(wotd.New, dict.New)

	handlerSet = wire.NewSet(home.New, entry.New)

	httpServerSet = wire.NewSet(router.New, NewHTTPServer, wire.Struct(
		new(MainDependency),
		"HTTPServer",
		"Logger",
	),
	)
)
